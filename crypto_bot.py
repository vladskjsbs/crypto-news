import os
import logging
import asyncio
import aiohttp
import feedparser
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "tg_bot"
DEEPSEEK_API_KEY = "ds_api"
CRYPTO_PANIC_API_KEY = "cp_api"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GENERATING_ANALYSIS, GENERATING_FORECAST, SELECTING_COIN = range(3)

# –ù–∞–¥–µ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
SOURCES = {
    "CryptoPanic": f"https://cryptopanic.com/api/v1/posts/?auth_token={CRYPTO_PANIC_API_KEY}&filter=hot",
    "CoinDesk": "https://www.coindesk.com/arc/outboundfeeds/rss/?outputType=xml",
    "CoinTelegraph": "https://cointelegraph.com/rss",
    "Decrypt": "https://decrypt.co/rss",
    "Binance": "https://www.binance.com/en/rss/news",
    "Coinbase": "https://blog.coinbase.com/feed"
}

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
SUPPORTED_COINS = ["BTC", "ETH", "SOL", "TON", "XLM", "BNB", "LTC"]

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def get_current_prices():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å CoinGecko"""
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {
        "ids": "bitcoin,ethereum,solana,toncoin,stellar,binancecoin,litecoin",
        "vs_currencies": "usd",
        "include_market_cap": "false",
        "include_24hr_vol": "false",
        "include_24hr_change": "true",
        "include_last_updated_at": "true"
    }
    
    coin_mapping = {
        "bitcoin": "BTC",
        "ethereum": "ETH",
        "solana": "SOL",
        "toncoin": "TON",
        "stellar": "XLM",
        "binancecoin": "BNB",
        "litecoin": "LTC"
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    result = {}
                    for coin_id, coin_data in data.items():
                        symbol = coin_mapping.get(coin_id)
                        if symbol:
                            result[symbol] = {
                                "price": coin_data["usd"],
                                "change": coin_data.get("usd_24h_change", 0)
                            }
                    return result
    except Exception as e:
        logging.error(f"CoinGecko API error: {str(e)[:200]}")
    
    # Fallback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return {
        coin: {"price": "N/A", "change": 0} for coin in SUPPORTED_COINS
    }

def format_price_change(change):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –∏–∫–æ–Ω–∫–æ–π"""
    if isinstance(change, (int, float)):
        icon = "üìà" if change >= 0 else "üìâ"
        return f"{icon} {abs(change):.2f}%"
    return ""

async def fetch_news() -> list:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)"""
    news = []
    now = datetime.utcnow()
    time_threshold = now - timedelta(hours=24)
    
    # –î–ª—è CryptoPanic (API)
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(SOURCES["CryptoPanic"], timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    for post in data.get("results", []):
                        published = datetime.fromisoformat(post["published_at"].replace("Z", "+00:00"))
                        if published >= time_threshold:
                            news.append({
                                "title": post["title"],
                                "link": post["url"],
                                "source": "CryptoPanic",
                                "published": published,
                                "votes": post.get("votes", {})
                            })
    except Exception as e:
        logging.error(f"CryptoPanic error: {str(e)[:100]}")
    
    # –î–ª—è RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    for name, url in [(k, v) for k, v in SOURCES.items() if k != "CryptoPanic"]:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as response:
                    if response.status == 200:
                        text = await response.text()
                        feed = feedparser.parse(text)
                        for entry in feed.entries:
                            if "published_parsed" in entry:
                                published = datetime(*entry.published_parsed[:6])
                                if published >= time_threshold:
                                    news.append({
                                        "title": entry.title,
                                        "link": entry.link,
                                        "source": name,
                                        "published": published,
                                    })
        except Exception as e:
            logging.error(f"Error fetching {name} RSS: {str(e)[:100]}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å–≤–µ–∂–∏–µ –ø–µ—Ä–≤—ã–º–∏)
    news.sort(key=lambda x: x["published"], reverse=True)
    return news[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —Å–∞–º—ã–º–∏ —Å–≤–µ–∂–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏

async def analyze_with_deepseek(prompt: str) -> str:
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é DeepSeek-R1"""
    url = "https://api.deepseek.com/chat/completions"
    headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}"}
    payload = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7,
        "max_tokens": 2000,
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers, timeout=60) as response:
                if response.status == 200:
                    data = await response.json()
                    if "choices" in data and len(data["choices"]) > 0:
                        return data["choices"][0]["message"]["content"]
                    else:
                        logging.error(f"DeepSeek response missing choices: {data}")
                else:
                    error = await response.text()
                    logging.error(f"DeepSeek API error {response.status}: {error[:200]}")
    except Exception as e:
        logging.error(f"DeepSeek API exception: {str(e)[:100]}")
    
    return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---
async def generate_full_analysis(news: list) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
    prices = await get_current_prices()
    current_date = datetime.now().strftime("%d %B %Y")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–ª–æ–∫ —Å —Ü–µ–Ω–∞–º–∏
    price_block = "üí∞ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:*\n"
    for asset, data in prices.items():
        price = f"${data['price']:,}" if isinstance(data['price'], (int, float)) else data['price']
        change = format_price_change(data.get('change', 0))
        price_block += f"- {asset}: {price} {change}\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    context = "üì∞ *–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:*\n\n"
    for i, item in enumerate(news[:10], 1):
        time_diff = datetime.utcnow() - item['published']
        hours_ago = time_diff.total_seconds() // 3600
        time_info = f"{int(hours_ago)} —á. –Ω–∞–∑–∞–¥" if hours_ago < 24 else item['published'].strftime('%d.%m.%Y')
        
        context += f"{i}. [{item['title']}]({item['link']}) ({item['source']} - {time_info})\n"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è DeepSeek —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã –∏ —Ü–µ–Ω
    prompt = (
        f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫. –°–µ–≥–æ–¥–Ω—è {current_date}. "
        f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤—ã:\n"
        f"- BTC: ${prices['BTC']['price']} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {prices['BTC'].get('change', 0):.2f}%)\n"
        f"- ETH: ${prices['ETH']['price']} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {prices['ETH'].get('change', 0):.2f}%)\n"
        f"- SOL: ${prices['SOL']['price']} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {prices['SOL'].get('change', 0):.2f}%)\n\n"
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –°–ê–ú–´–ï –°–í–ï–ñ–ò–ï –Ω–æ–≤–æ—Å—Ç–∏ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤:\n\n"
        f"{context}\n\n"
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 300 —Å–ª–æ–≤):\n"
        "1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π)\n"
        "2. –í–ª–∏—è–Ω–∏–µ –Ω–∞ BTC, ETH, SOL (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω)\n"
        "3. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞ (—Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏)\n"
        "4. –¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ª–µ–∫—Å–∏–∫—É. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º. "
        "–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ä—à–µ 2024 –≥–æ–¥–∞. "
        "–í—Å–µ —Ü–µ–Ω—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏."
    )
    
    return price_block + "\n" + await analyze_with_deepseek(prompt)

async def generate_weekly_forecast(news: list) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
    prices = await get_current_prices()
    current_date = datetime.now().strftime("%d %B %Y")
    next_week = (datetime.now() + timedelta(days=7)).strftime("%d %B %Y")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–ª–æ–∫ —Å —Ü–µ–Ω–∞–º–∏
    price_block = "üí∞ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:*\n"
    for asset, data in prices.items():
        price = f"${data['price']:,}" if isinstance(data['price'], (int, float)) else data['price']
        change = format_price_change(data.get('change', 0))
        price_block += f"- {asset}: {price} {change}\n"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç –∏ —Ü–µ–Ω
    prompt = (
        f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫. –°–µ–≥–æ–¥–Ω—è {current_date}. "
        f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤—ã:\n"
        f"- BTC: ${prices['BTC']['price']}\n"
        f"- ETH: ${prices['ETH']['price']}\n"
        f"- SOL: ${prices['SOL']['price']}\n\n"
        f"–°–¥–µ–ª–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é ({current_date} - {next_week}) "
        f"–¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.\n\n"
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–∞–∫—Å–∏–º—É–º 400 —Å–ª–æ–≤):\n"
        "1. –û–±–∑–æ—Ä —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π (–Ω–∞ –æ—Å–Ω–æ–≤–µ –°–í–ï–ñ–ò–• –¥–∞–Ω–Ω—ã—Ö)\n"
        "2. –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ BTC, ETH, SOL (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ü–µ–Ω–æ–≤—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)\n"
        "3. –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ)\n"
        "4. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤\n\n"
        "–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º. –£—á–∏—Ç—ã–≤–∞–π –¢–û–õ–¨–ö–û —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 48 —á–∞—Å–æ–≤. "
        "–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ä—à–µ 2024 –≥–æ–¥–∞. "
        "–í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–æ–ª–∂–Ω—ã –æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω–∞—Ö –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö."
    )
    
    return price_block + "\n" + await analyze_with_deepseek(prompt)

async def generate_coin_analysis(coin: str, news: list) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
    prices = await get_current_prices()
    coin_price = prices.get(coin, {"price": "N/A", "change": 0})
    current_date = datetime.now().strftime("%d %B %Y")
    next_week = (datetime.now() + timedelta(days=7)).strftime("%d %B %Y")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–ª–æ–∫ —Å —Ü–µ–Ω–æ–π
    price = f"${coin_price['price']:,}" if isinstance(coin_price['price'], (int, float)) else coin_price['price']
    change = format_price_change(coin_price.get('change', 0))
    price_block = f"üí∞ *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {coin}:* {price} {change}\n"
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
    coin_news = [item for item in news if coin.lower() in item['title'].lower()]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π
    context = f"üì∞ *–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ {coin}:*\n\n"
    news_links = []  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
    
    if coin_news:
        for i, item in enumerate(coin_news[:5], 1):
            time_diff = datetime.utcnow() - item['published']
            hours_ago = time_diff.total_seconds() // 3600
            time_info = f"{int(hours_ago)} —á. –Ω–∞–∑–∞–¥" if hours_ago < 24 else item['published'].strftime('%d.%m.%Y')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Å—Å—ã–ª–∫—É
            context += f"{i}. [{item['title']}]({item['link']}) ({item['source']} - {time_info})\n"
            news_links.append(item['link'])
    else:
        context += "–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ —ç—Ç–æ–π –≤–∞–ª—é—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è DeepSeek
    prompt = (
        f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫. –°–µ–≥–æ–¥–Ω—è {current_date}. "
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {coin}: {price} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {coin_price.get('change', 0):.2f}%)\n\n"
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å {coin}, –∏ —Å–¥–µ–ª–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é ({current_date} - {next_week}).\n\n"
        f"{context}\n\n"
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 300 —Å–ª–æ–≤):\n"
        "1. –ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ü–µ–Ω—É\n"
        "2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (—Ç—Ä–µ–Ω–¥—ã, —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è)\n"
        "3. –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤\n\n"
        "–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
    )
    
    analysis = await analyze_with_deepseek(prompt)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –≤ –∫–æ–Ω—Ü–µ
    if news_links:
        analysis += "\n\nüîç *–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:*\n"
        for i, link in enumerate(news_links[:5], 1):
            analysis += f"{i}. [–°—Ç–∞—Ç—å—è {i}]({link})\n"
    
    return price_block + "\n" + analysis

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---
def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ –∑–∞ 24—á", callback_data="daily")],
        [InlineKeyboardButton("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="weekly")],
        [InlineKeyboardButton("üì∞ –¢–æ–ø-5 –Ω–æ–≤–æ—Å—Ç–µ–π", callback_data="news")],
        [InlineKeyboardButton("üí∞ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞", callback_data="specific_coin")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_coin_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã"""
    keyboard = []
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 3 –º–æ–Ω–µ—Ç—ã
    for i in range(0, len(SUPPORTED_COINS), 3):
        row = [
            InlineKeyboardButton(coin, callback_data=f"coin_{coin}")
            for coin in SUPPORTED_COINS[i:i+3]
        ]
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(keyboard)

def create_cancel_button():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start"""
    await update.message.reply_text(
        "üí∞ *–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!*\n"
        f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu(),
        parse_mode="Markdown"
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu()
    )
    return ConversationHandler.END

async def specific_coin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=create_coin_menu()
    )
    return SELECTING_COIN

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu()
    )
    return ConversationHandler.END

async def coin_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    query = update.callback_query
    await query.answer()
    coin = query.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await query.edit_message_text(
        text=f"‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {coin}...\n–°–æ–±–∏—Ä–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é.",
        reply_markup=create_cancel_button()
    )
    
    # –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
    news = await fetch_news()
    analysis = await generate_coin_analysis(coin, news)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
    analysis = f"üîç *–ê–ù–ê–õ–ò–ó –ò –ü–†–û–ì–ù–û–ó –î–õ–Ø {coin}:*\n\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}\n\n{analysis}"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await query.edit_message_text(
        text=analysis,
        parse_mode="Markdown",
        reply_markup=create_main_menu()
    )
    return ConversationHandler.END

async def daily_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ 24 —á–∞—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await query.edit_message_text(
        text="‚è≥ *–°–æ–±–∏—Ä–∞—é –°–í–ï–ñ–ò–ï –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫...*\n"
             "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞...",
        parse_mode="Markdown",
        reply_markup=create_cancel_button()
    )
    
    # –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
    news = await fetch_news()
    analysis = await generate_full_analysis(news)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
    analysis = f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}\n\n{analysis}"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await query.edit_message_text(
        text=f"üìä *–ö–†–ò–ü–¢–û–ê–ù–ê–õ–ò–¢–ò–ö–ê –ó–ê 24 –ß–ê–°–ê:*\n\n{analysis}",
        parse_mode="Markdown",
        reply_markup=create_main_menu()
    )
    return ConversationHandler.END

async def weekly_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await query.edit_message_text(
        text="‚è≥ *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é –ø—Ä–æ–≥–Ω–æ–∑...*\n"
             "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ...",
        parse_mode="Markdown",
        reply_markup=create_cancel_button()
    )
    
    # –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    news = await fetch_news()
    forecast = await generate_weekly_forecast(news)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
    today = datetime.now().strftime("%d.%m.%Y")
    next_week = (datetime.now() + timedelta(days=7)).strftime("%d.%m.%Y")
    forecast = f"üìÖ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞: {today} - {next_week}\n\n{forecast}"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await query.edit_message_text(
        text=f"üîÆ *–ü–†–û–ì–ù–û–ó –ù–ê –ù–ï–î–ï–õ–Æ:*\n\n{forecast}",
        parse_mode="Markdown",
        reply_markup=create_main_menu()
    )
    return ConversationHandler.END

async def show_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-5 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    news = await fetch_news()
    top_news = news[:5]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
    message = "üì∞ *–°–ê–ú–´–ï –°–í–ï–ñ–ò–ï –ù–û–í–û–°–¢–ò:*\n\n"
    for i, item in enumerate(top_news, 1):
        time_diff = (datetime.utcnow() - item['published']).total_seconds()
        hours_ago = time_diff // 3600
        minutes_ago = (time_diff % 3600) // 60
        
        if hours_ago > 0:
            time_info = f"{int(hours_ago)} —á. {int(minutes_ago)} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            time_info = f"{int(minutes_ago)} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        
        message += f"{i}. [{item['title']}]({item['link']}) \n‚åö {time_info} | {item['source']}\n\n"
    
    await query.edit_message_text(
        text=message,
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=create_main_menu()
    )

# --- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏ ---
async def send_scheduled_news(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ (7:00-21:00 GMT+1)
        now = datetime.utcnow() + timedelta(hours=1)  # GMT+1
        if not (7 <= now.hour <= 21):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ —Å—Ç–∞—Ä—à–µ 4 —á–∞—Å–æ–≤
        news = await fetch_news()
        hot_news = [n for n in news if (datetime.utcnow() - n['published']).total_seconds() < 14400]
        
        if not hot_news:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
        prices = await get_current_prices()
        price_block = "üí∞ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:*\n"
        for asset, data in prices.items():
            price = f"${data['price']:,}" if isinstance(data['price'], (int, float)) else data['price']
            change = format_price_change(data.get('change', 0))
            price_block += f"- {asset}: {price} {change}\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üî• *–°–í–ï–ñ–ò–ï –ù–û–í–û–°–¢–ò –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 4 –ß–ê–°–ê:*\n\n"
        for i, item in enumerate(hot_news[:3], 1):
            time_diff = (datetime.utcnow() - item['published']).total_seconds()
            hours_ago = int(time_diff // 3600)
            minutes_ago = int((time_diff % 3600) // 60)
            
            if hours_ago > 0:
                time_info = f"{hours_ago} —á. {minutes_ago} –º–∏–Ω. –Ω–∞–∑–∞–¥"
            else:
                time_info = f"{minutes_ago} –º–∏–Ω. –Ω–∞–∑–∞–¥"
            
            message += f"{i}. [{item['title']}]({item['link']}) \n‚åö {time_info} | {item['source']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã
        message += "\n" + price_block
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await context.bot.send_message(
            chat_id=context.job.chat_id,
            text=message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    except Exception as e:
        logging.error(f"Error in send_scheduled_news: {str(e)[:100]}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    # –°–æ–∑–¥–∞–µ–º Application —Å JobQueue
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(daily_analysis, pattern="^daily$"),
            CallbackQueryHandler(weekly_forecast, pattern="^weekly$"),
            CallbackQueryHandler(specific_coin, pattern="^specific_coin$"),
        ],
        states={
            GENERATING_ANALYSIS: [CallbackQueryHandler(cancel, pattern="^cancel$")],
            GENERATING_FORECAST: [CallbackQueryHandler(cancel, pattern="^cancel$")],
            SELECTING_COIN: [
                CallbackQueryHandler(coin_analysis, pattern="^coin_"),
                CallbackQueryHandler(back_to_main, pattern="^back_to_main$"),
                CallbackQueryHandler(cancel, pattern="^cancel$")
            ],
        },
        fallbacks=[CommandHandler("start", start)],
        per_message=False
    )
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(show_news, pattern="^news$"))
    application.add_handler(CallbackQueryHandler(cancel, pattern="^cancel$"))
    application.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    job_queue = application.job_queue
    if job_queue:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (14400 —Å–µ–∫—É–Ω–¥)
        job_queue.run_repeating(
            send_scheduled_news,
            interval=14400,
            first=10
        )
    
    application.run_polling()

if __name__ == "__main__":
    main()
